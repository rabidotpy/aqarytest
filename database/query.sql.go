// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package database

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, phone_number, otp, otp_created_at)
VALUES ($1, $2, $3, $4)
RETURNING id, name, phone_number, otp, otp_created_at
`

type CreateUserParams struct {
	Name         string
	PhoneNumber  string
	Otp          pgtype.Text
	OtpCreatedAt pgtype.Timestamptz
}

type CreateUserRequest struct {
	Name         string
	PhoneNumber  string
}


func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.PhoneNumber,
		arg.Otp,
		arg.OtpCreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpCreatedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, phone_number, otp, otp_created_at
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	fmt.Println("row: ", row);
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpCreatedAt,
	)
	fmt.Println("i: ", i);
	return i, err
}

const updateUserOTP = `-- name: UpdateUserOTP :exec
UPDATE users
SET otp = $1, otp_created_at = NOW()
WHERE phone_number = $2
`

type UpdateUserOTPParams struct {
	Otp         pgtype.Text
	PhoneNumber string
}

func (q *Queries) UpdateUserOTP(ctx context.Context, arg UpdateUserOTPParams) error {
	_, err := q.db.Exec(ctx, updateUserOTP, arg.Otp, arg.PhoneNumber)
	return err
}

const verifyUserOTP = `-- name: VerifyUserOTP :one
SELECT otp FROM users WHERE phone_number = $1
`

func (q *Queries) VerifyUserOTP(ctx context.Context, phoneNumber string) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, verifyUserOTP, phoneNumber)
	var otp pgtype.Text
	err := row.Scan(&otp)
	return otp, err
}
